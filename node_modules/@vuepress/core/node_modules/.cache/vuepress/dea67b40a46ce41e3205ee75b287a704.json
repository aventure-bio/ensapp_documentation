{"remainingRequest":"/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/define-initialize/code/aventure_bio_documentation/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/index.js??ref--1-1!/home/define-initialize/code/aventure_bio_documentation/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/define-initialize/code/aventure_bio_documentation/docs/our_apps/aob.md?vue&type=template&id=5e42d6bd&","dependencies":[{"path":"/home/define-initialize/code/aventure_bio_documentation/docs/our_apps/aob.md","mtime":1613598937284},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}