{"remainingRequest":"/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/define-initialize/code/aventure_bio_documentation/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/index.js??ref--1-1!/home/define-initialize/code/aventure_bio_documentation/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/define-initialize/code/aventure_bio_documentation/docs/ensapp/Ajouter un shop.md?vue&type=template&id=0b9a6ad0&","dependencies":[{"path":"/home/define-initialize/code/aventure_bio_documentation/docs/ensapp/Ajouter un shop.md","mtime":1623418727959},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/define-initialize/code/aventure_bio_documentation/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}